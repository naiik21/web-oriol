---
import WorkItem from './WorkItem.astro'
const currentPath = Astro.url.pathname

const WORKSTYPES = [
  {
    title: '',
    source: '',
    style: 'w-[18vw]',
    src: ''
  },
  {
    title: 'Corporativos y Marcas',
    source: '/portadas-trabajos/corporativo-portada.mp4',
    src: '/corporativos'
  },
  {
    title: 'Restaurantes',
    source: '/portadas-trabajos/restaurantes-portada.mp4',
    src: '/restaurantes'
  },
  {
    title: 'Bodas',
    source: '/portadas-trabajos/bodas-portada.mp4',
    src: '/bodas'
  },
  {
    title: 'Eventos',
    source: '/portadas-trabajos/eventos-portada.mp4',
    src: '/eventos'
  },
  {
    title: 'Eventos deportivos',
    source: '/portadas-trabajos/deportes-portada.mp4',
    src: '/deportes'
  },
  {
    title: 'Moda',
    source: '/portadas-trabajos/moda-portada.mp4',
    src: '/moda'
  },
  {
    title: 'Alimentacion',
    source: '/portadas-trabajos/alimentacion-portada.mp4',
    src: '/alimentacion'
  },
  {
    title: 'Educacion',
    source: '/portadas-trabajos/eduacion-portada.mp4',
    src: '/educacion'
  },
  {
    title: 'Cortometraje',
    source: '/portadas-trabajos/cortometraje-portada.mp4',
    src: '/cortometraje'
  },
  {
    title: '',
    source: '',
    style: 'w-[19vw]',
    src: ''
  }
]
---

<div class='w-full h-full'>
  <ul
    id='scroll-container'
    style='scroll-behavior: smooth;'
    class='list-none flex w-full h-full overflow-x-hidden whitespace-nowrap gap-20'>
    {
      WORKSTYPES.map((work) => (
        <li
          class={`${work.style || 'w-auto'} h-screen flex flex-none items-center justify-center text-4xl xl:text-8xl lg:text-7xl md:text-6xl sm:text-5xl`}>
          <WorkItem {...work} />
        </li>
      ))
    }
  </ul>
</div>

<script>
  const scrollContainer = document.querySelector('#scroll-container')
  const scrollSpeed = 3.5 // Ajusta este valor para aumentar o reducir la velocidad

  // Desplazamiento para PC
  scrollContainer.addEventListener('wheel', (event) => {
    event.preventDefault() // Evita el scroll vertical por defecto
    scrollContainer.scrollLeft += event.deltaY * scrollSpeed // Ajusta la velocidad
  })

  // Variables para manejo de desplazamiento t치ctil
  let isTouching = false
  let touchStartX = 0
  let scrollStartX = 0

  // Detectar el inicio del toque
  scrollContainer.addEventListener('touchstart', (event) => {
    isTouching = true
    touchStartX = event.touches[0].clientX // Posici칩n inicial del toque
    scrollStartX = scrollContainer.scrollLeft // Posici칩n inicial del scroll
  })

  // Detectar el movimiento del toque
  scrollContainer.addEventListener('touchmove', (event) => {
    if (!isTouching) return

    const touchX = event.touches[0].clientX
    const deltaX = touchStartX - touchX // Diferencia entre la posici칩n inicial y actual del toque
    scrollContainer.scrollLeft = scrollStartX + deltaX // Actualizar el scroll
  })

  // Detectar el fin del toque
  scrollContainer.addEventListener('touchend', () => {
    isTouching = false
  })
</script>
